openapi: 3.0.0
info:
  title: Baccarat Game API
  description: >-
    API for managing a Baccarat game. This API allows players to place bets,
    play rounds, and retrieve game information.
  version: 1.0.0
servers:
  - url: https://api.baccaratio.porkolab.hu/
paths:
  /bet/{type}/{amount}:
    post:
      summary: Place a bet
      description: >-
        Place a bet of a specific type and amount for the next round of
        Baccarat.
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum:
              - PLAYER
              - BANKER
              - TIE
              - PERFECT_PAIR_ONE
              - PLAYER_PAIR
              - BANKER_PAIR
              - EITHER_PAIR
          description: The type of bet
        - in: path
          name: amount
          required: true
          schema:
            type: integer
            minimum: 1
          description: The amount to bet
      responses:
        '200':
          description: Bet placed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Bet placed successfully
        '400':
          description: Invalid bet or insufficient chips
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid bet type or insufficient chips
  /play:
    get:
      summary: Play a round of Baccarat
      description: >-
        Play a round of Baccarat with the current bet. This will draw cards and
        determine the winner.
      responses:
        '200':
          description: Round played successfully
          content:
            text/plain:
              schema:
                type: string
                description: A string describing the result of the round
                example: 'Player won! Score: 8 vs. Banker''s score: 6'
  /cards:
    get:
      summary: Get the current cards on the table
      description: Retrieve the cards currently in play for both the player and the banker.
      responses:
        '200':
          description: Cards retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  playerCards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'
                  bankerCards:
                    type: array
                    items:
                      $ref: '#/components/schemas/Card'
  /result:
    get:
      summary: Get the result of the last round
      description: Retrieve the result of the most recently played round of Baccarat.
      responses:
        '200':
          description: Result retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                example: 'Player won! Score: 8 vs. Banker''s score: 6'
  /player:
    get:
      summary: Get player information
      description: >-
        Retrieve information about the current player, including name and chip
        count.
      responses:
        '200':
          description: Player information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          description: Player not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Player not found
  /player/chips:
    get:
      summary: Get player's current chip count
      description: Retrieve the current number of chips the player has.
      responses:
        '200':
          description: Chip count retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  chips:
                    type: integer
                    example: 1000
        '400':
          description: Player not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Player not found
    post:
      summary: Update player's chip count
      description: Add or remove chips from the player's current count.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: integer
                  description: The amount of chips to add (positive) or remove (negative)
      responses:
        '200':
          description: Chips updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Chips updated successfully
        '400':
          description: Failed to update chips
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Failed to update chips: Insufficient funds'
  /player/name:
    get:
      summary: Get player's name
      description: Retrieve the current player's name.
      responses:
        '200':
          description: Player name retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: John Doe
        '400':
          description: Player name is not set
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Player name is not set
    put:
      summary: Set player's name
      description: Update the current player's name.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The new name for the player
      responses:
        '200':
          description: Player name updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Player name updated successfully
        '400':
          description: Invalid name or player not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid name or player not found
  /:
    get:
      summary: Welcome message
      description: Retrieve a welcome message for the Baccarat game API.
      responses:
        '200':
          description: Welcome message retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Welcome to the Baccarat Game API!
components:
  schemas:
    Card:
      type: object
      properties:
        suit:
          type: string
          enum:
            - Hearts
            - Diamonds
            - Clubs
            - Spades
          description: The suit of the card
        value:
          type: string
          enum:
            - A
            - '2'
            - '3'
            - '4'
            - '5'
            - '6'
            - '7'
            - '8'
            - '9'
            - '10'
            - J
            - Q
            - K
          description: The value of the card
        points:
          type: integer
          minimum: 0
          maximum: 9
          description: The point value of the card in Baccarat
    Player:
      type: object
      properties:
        name:
          type: string
          description: The name of the player
        chips:
          type: integer
          minimum: 0
          description: The current number of chips the player has
    BetType:
      type: string
      enum:
        - PLAYER
        - BANKER
        - TIE
        - PERFECT_PAIR_ONE
        - PLAYER_PAIR
        - BANKER_PAIR
        - EITHER_PAIR
      description: The types of bets available in Baccarat
    Deck:
      type: object
      properties:
        cards:
          type: array
          items:
            $ref: '#/components/schemas/Card'
          description: The cards currently in the deck