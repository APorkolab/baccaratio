name: CI + Tools
on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  workflow_dispatch: {} # Manual trigger for the "Tool – Angular Full Upgrade PR (Iterative)" job

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # =============== PATH DETECT (Find everything in one place) ===============
  detect-paths:
    name: Detect project paths
    runs-on: ubuntu-latest
    outputs:
      FRONT_DIR: ${{ steps.out.outputs.FRONT_DIR }}
      FRONT_IS_ANGULAR: ${{ steps.out.outputs.FRONT_IS_ANGULAR }}
      JAVA_DIR: ${{ steps.out.outputs.JAVA_DIR }}
      NODE_DIR: ${{ steps.out.outputs.NODE_DIR }}
    steps:
      - uses: actions/checkout@v4
      - id: out
        run: |
          # --- Find frontend: prefer 'frontend/', otherwise any angular.json ---
          FRONT_DIR=""
          if [ -f frontend/package.json ]; then
            FRONT_DIR="frontend"
          else
            hit="$(find . -maxdepth 3 -type f -name angular.json | head -n1 || true)"
            if [ -n "$hit" ]; then
              FRONT_DIR="$(dirname "$hit" | sed 's|^\./||')"
            fi
          fi

          FRONT_IS_ANGULAR="false"
          if [ -n "$FRONT_DIR" ] && [ -f "$FRONT_DIR/package.json" ]; then
            HAS_NG=$(node -p "p=require('./$FRONT_DIR/package.json');(p.dependencies&&p.dependencies['@angular/core'])||(p.devDependencies&&p.devDependencies['@angular/core'])? 'true':'false'" || echo "false")
            FRONT_IS_ANGULAR="$HAS_NG"
          fi

          # --- Find Java backend: prefer 'backend/', then 'api/', then any pom.xml ---
          JAVA_DIR=""
          if [ -f backend/pom.xml ]; then
            JAVA_DIR="backend"
          elif [ -f api/pom.xml ]; then
            JAVA_DIR="api"
          else
            hit="$(find . -maxdepth 3 -type f -name pom.xml | head -n1 || true)"
            if [ -n "$hit" ]; then
              JAVA_DIR="$(dirname "$hit" | sed 's|^\./||')"
            fi
          fi

          # --- Find Node backend: prefer 'backend/' or 'api/' with package.json (if no pom.xml exists there) ---
          NODE_DIR=""
          if [ -f backend/package.json ] && [ ! -f backend/pom.xml ]; then
            NODE_DIR="backend"
          elif [ -f api/package.json ] && [ ! -f api/pom.xml ]; then
            NODE_DIR="api"
          else
            hit="$(find . -maxdepth 3 -type f -name package.json | grep -Ev '^\.\/(node_modules|frontend|web|dist|build)\/' | head -n1 || true)"
            if [ -n "$hit" ]; then
              d="$(dirname "$hit" | sed 's|^\./||')"
              if [ ! -f "$d/pom.xml" ]; then NODE_DIR="$d"; fi
            fi
          fi

          echo "FRONT_DIR=$FRONT_DIR" >> $GITHUB_OUTPUT
          echo "FRONT_IS_ANGULAR=$FRONT_IS_ANGULAR" >> $GITHUB_OUTPUT
          echo "JAVA_DIR=$JAVA_DIR" >> $GITHUB_OUTPUT
          echo "NODE_DIR=$NODE_DIR" >> $GITHUB_OUTPUT

  # =============== BACKEND: JAVA (MAVEN) ===============
  backend-java:
    name: Backend (Java/Maven)
    needs: [detect-paths]
    runs-on: ubuntu-latest
    if: ${{ needs.detect-paths.outputs.JAVA_DIR != '' }}
    steps:
      - uses: actions/checkout@v4
      - id: jd
        run: |
          cd "${{ needs.detect-paths.outputs.JAVA_DIR }}"
          JAVA=17
          if grep -Eq '<maven\.compiler\.release>21</maven\.compiler\.release>|<maven\.compiler\.(source|target)>21</maven\.compiler\.(source|target)>' pom.xml; then
            JAVA=21
          fi
          echo "java=$JAVA" >> $GITHUB_OUTPUT
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ steps.jd.outputs.java }}
          cache: maven
      - name: Build (skip tests for stability)
        run: |
          cd "${{ needs.detect-paths.outputs.JAVA_DIR }}"
          mvn -B -q -DskipTests -DskipITs -Dmaven.test.skip=true clean package || mvn -B -q -DskipTests clean package

  # =============== BACKEND: NODE / EXPRESS ===============
  backend-node:
    name: Backend (Node/Express)
    needs: [detect-paths]
    runs-on: ubuntu-latest
    if: ${{ needs.detect-paths.outputs.NODE_DIR != '' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ needs.detect-paths.outputs.NODE_DIR }}/package-lock.json
      - name: Install
        run: |
          cd "${{ needs.detect-paths.outputs.NODE_DIR }}"
          npm ci || npm ci --legacy-peer-deps
      - name: Lint (best-effort)
        run: |
          cd "${{ needs.detect-paths.outputs.NODE_DIR }}"
          npm run lint --if-present || echo "No lint or failed — continuing."
      - name: Build (best-effort)
        run: |
          cd "${{ needs.detect-paths.outputs.NODE_DIR }}"
          npm run build --if-present || echo "No build script — continuing."
      - name: Test (best-effort)
        run: |
          cd "${{ needs.detect-paths.outputs.NODE_DIR }}"
          npm test --if-present || echo "No tests or failed — continuing."

  # =============== FRONTEND: ANGULAR / GENERIC (CI JOB) ===============
  frontend:
    name: Frontend (CI)
    needs: [detect-paths]
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'workflow_dispatch' && needs.detect-paths.outputs.FRONT_DIR != '' }}
    defaults:
      run:
        working-directory: ${{ needs.detect-paths.outputs.FRONT_DIR }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ needs.detect-paths.outputs.FRONT_DIR }}/package-lock.json

      # Mindig tiszta, reprodukálható telepítés + devDependencies
      - name: Install dependencies (ci + dev)
        run: |
          npm ci --include=dev || npm ci --legacy-peer-deps --include=dev

      # Toolchain guard: ha a lock/dep-list nem hozza, pótoljuk a webpack láncot
      - name: Ensure build toolchain (webpack for ngx-build-plus)
        run: |
          set -e
          npm ls webpack >/dev/null 2>&1 || npm i -D webpack@^5 webpack-merge@^5 @types/webpack@^5
          # ha saját loader/plugin kell a webpack.config.js-ben, itt lehet pótolni: npm i -D <loader/plugin>

      - name: Check if Angular upgrade is needed
        id: check_upgrade
        if: ${{ needs.detect-paths.outputs.FRONT_IS_ANGULAR == 'true' }}
        env:
          NPM_CONFIG_FUND: "false"
        run: |
          echo "Checking for potential Angular version mismatch..."
          LATEST_MAJ=$(npm view @angular/core version | sed 's/\..*//')
          CURRENT_VER=$(node -p "require('./node_modules/@angular/core/package.json').version")
          CURRENT_MAJ=$(echo "$CURRENT_VER" | sed -E 's/\..*//')

          if [ "$CURRENT_MAJ" -lt "$LATEST_MAJ" ]; then
            echo "UPGRADE_NEEDED=true" >> $GITHUB_OUTPUT
            echo "::warning::Angular upgrade needed from v${CURRENT_MAJ} to v${LATEST_MAJ}. Skipping build and tests. Please run the 'Tool – Angular Full Upgrade PR (Iterative)' workflow."
          else
            echo "UPGRADE_NEEDED=false" >> $GITHUB_OUTPUT
            echo "Angular version is up to date."
          fi
      - name: Create .env from GitHub Secrets
        working-directory: ${{ needs.detect-paths.outputs.FRONT_DIR }}
        run: |
          {
            echo "API_URL=${API_URL}"
            echo "NG_ENV=production"
            # adj hozzá, ami kell még:
            # echo "SOME_KEY=${SOME_KEY}"
          } > .env
        env:
          API_URL: ${{ secrets.API_URL }}
          # SOME_KEY: ${{ secrets.SOME_KEY }}

      - name: Build (Angular or generic)
        if: ${{ steps.check_upgrade.outputs.UPGRADE_NEEDED != 'true' }}
        env:
          CI: "true"
        run: |
          npm run build --if-present

      - name: Optional tests (best-effort)
        if: ${{ steps.check_upgrade.outputs.UPGRADE_NEEDED != 'true' }}
        env:
          CI: "true"
        run: |
          npm run test --if-present -- --watch=false --browsers=ChromeHeadless --no-sandbox || echo "Skipping tests."

  # =============== TOOL: Manual Angular Full Upgrade PR ===============
  upgrade-angular-loop:
    name: Tool – Angular Full Upgrade PR (Iterative)
    needs: [detect-paths]
    if: ${{ github.event_name == 'workflow_dispatch' && needs.detect-paths.outputs.FRONT_DIR != '' && needs.detect-paths.outputs.FRONT_IS_ANGULAR == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ needs.detect-paths.outputs.FRONT_DIR }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Clean install (dev deps included)
        run: |
          rm -rf node_modules package-lock.json
          npm ci --include=dev || npm ci --legacy-peer-deps --include=dev

      - name: Temporarily remove ngx-build-plus (if present)
        id: maybe_remove_ngxbp
        run: |
          if node -p "require('./package.json').devDependencies?.['ngx-build-plus'] || require('./package.json').dependencies?.['ngx-build-plus']" >/dev/null 2>&1; then
            echo "HAS_NGX_BUILD_PLUS=true" >> $GITHUB_OUTPUT
            npm uninstall ngx-build-plus
          else
            echo "HAS_NGX_BUILD_PLUS=false" >> $GITHUB_OUTPUT
          fi

      - name: Iteratively upgrade Angular to latest
        id: upgrade_loop
        run: |
          LATEST_MAJ=$(npm view @angular/core version | sed 's/\..*//')
          echo "Latest available major version is ${LATEST_MAJ}"

          while true; do
            CURRENT_VER=$(node -p "require('./node_modules/@angular/core/package.json').version")
            CURRENT_MAJ=$(echo "$CURRENT_VER" | sed -E 's/\..*//')
            echo "Current major version: ${CURRENT_MAJ}"

            if [ "$CURRENT_MAJ" -ge "$LATEST_MAJ" ]; then
              echo "Already at or beyond the latest version. Exiting loop."
              break
            fi

            NEXT_MAJ=$((CURRENT_MAJ + 1))
            echo "Upgrading from v${CURRENT_MAJ} to v${NEXT_MAJ}..."

            npx -y @angular/cli@${NEXT_MAJ} update @angular/cli@${NEXT_MAJ} @angular/core@${NEXT_MAJ} --force --allow-dirty
          done

      - name: Reinstall ngx-build-plus if it existed
        if: ${{ steps.maybe_remove_ngxbp.outputs.HAS_NGX_BUILD_PLUS == 'true' }}
        run: |
          npm i -D ngx-build-plus@latest

      - name: Ensure devkit core and webpack present
        run: |
          npm ls @angular-devkit/core >/dev/null 2>&1 || npm i -D @angular-devkit/core@latest
          npm ls webpack >/dev/null 2>&1 || npm i -D webpack@^5 webpack-merge@^5 @types/webpack@^5

      - name: Set final Angular version output
        id: finalver
        run: |
          FINAL_VER=$(node -p "require('./node_modules/@angular/core/package.json').version")
          echo "FINAL_VER=${FINAL_VER}" >> $GITHUB_OUTPUT

      - name: Create PR
        if: ${{ always() && steps.upgrade_loop.outcome == 'success' }}
        uses: peter-evans/create-pull-request@v6
        with:
          base: ${{ github.event.repository.default_branch }}
          branch: chore/angular-full-upgrade
          title: "chore(frontend): upgrade Angular to latest (v${{ steps.finalver.outputs.FINAL_VER }})"
          commit-message: "chore(frontend): iteratively upgrade Angular to latest version"
          body: |
            Automated iterative Angular upgrade to v${{ steps.finalver.outputs.FINAL_VER }} in `${{ needs.detect-paths.outputs.FRONT_DIR }}`.

            This PR was generated by the 'Angular Full Upgrade' tool. The CI process running on this PR will verify the build and test status. Manual code adjustments may be required.
          labels: dependencies, angular

      - name: Output PR URL
        if: ${{ always() && steps.create-pull-request.outputs.pull-request-url != '' }}
        run: |
          echo "::notice title=Pull Request Created!::${{ steps.create-pull-request.outputs['pull-request-url'] }}"
